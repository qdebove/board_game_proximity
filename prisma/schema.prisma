generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PUBLIC
  FRIENDS
  LINK
}

enum SessionStatus {
  OPEN
  FULL
  CANCELLED
  DONE
}

enum ContributionType {
  NONE
  MONEY
  ITEMS
}

enum RsvpStatus {
  PENDING
  ACCEPTED
  DECLINED
  WAITLIST
}

model User {
  id               String   @id @default(cuid())
  name             String?
  email            String?  @unique
  emailVerified    DateTime?
  image            String?
  homeLocation     Json?
  radiusKmDefault  Int?     @default(10)
  favoriteGames    Game[]   @relation("FavoriteGames")
  sessionsHosted   Session[] @relation("SessionHost")
  rsvps            Rsvp[]
  messages         Message[]
  createdAt        DateTime @default(now())

  accounts Account[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          String    @id @default(cuid())
  name        String   @unique
  category    String
  minPlayers  Int
  maxPlayers  Int
  durationMin Int
  thumbnailUrl String?
  bggId       Int?
  sessions    Session[]
  favoritedBy User[]    @relation("FavoriteGames")
  createdAt   DateTime  @default(now())
}

model Session {
  id              String            @id @default(cuid())
  hostId          String
  title           String
  description     String?
  addressApprox   String
  geo             Json?
  geohash         String
  startsAt        DateTime
  endsAt          DateTime
  capacity        Int
  visibility      Visibility        @default(PUBLIC)
  contributionType ContributionType @default(NONE)
  contributionNote String?
  priceCents      Int?
  status          SessionStatus     @default(OPEN)
  createdAt       DateTime          @default(now())

  host            User              @relation("SessionHost", fields: [hostId], references: [id])
  games           Game[]
  rsvps           Rsvp[]
  messages        Message[]

  @@index([geohash])
  @@index([startsAt])
}

model Rsvp {
  id         String     @id @default(cuid())
  sessionId  String
  userId     String
  status     RsvpStatus @default(PENDING)
  note       String?
  willBring  String?
  createdAt  DateTime   @default(now())

  session    Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  authorId  String
  body      String
  createdAt DateTime @default(now())

  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}